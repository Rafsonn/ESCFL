apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: ankane/pgvector:latest
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: breakout-secrets
              key: db_username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: breakout-secrets
              key: db_password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: breakout-config
              key: db_database
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          limits:
            cpu: "1000m"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
data:
  001_initial_schema.sql: |
    -- Enable the pgvector extension
    CREATE EXTENSION IF NOT EXISTS pgvector;

    -- Users table
    CREATE TABLE users (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      email VARCHAR(255) UNIQUE,
      username VARCHAR(255),
      password VARCHAR(255),
      wallet_address VARCHAR(255),
      is_wallet_verified BOOLEAN DEFAULT FALSE,
      is_email_verified BOOLEAN DEFAULT FALSE,
      avatar_url VARCHAR(255),
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Create index on wallet_address
    CREATE INDEX idx_users_wallet_address ON users(wallet_address);

    -- Chat rooms table
    CREATE TABLE chat_rooms (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(255) NOT NULL,
      description TEXT,
      is_private BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Chat room participants
    CREATE TABLE chat_room_participants (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      room_id UUID NOT NULL REFERENCES chat_rooms(id) ON DELETE CASCADE,
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      UNIQUE(room_id, user_id)
    );

    -- Messages table
    CREATE TABLE messages (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      room_id UUID NOT NULL REFERENCES chat_rooms(id) ON DELETE CASCADE,
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      content TEXT NOT NULL,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Create index on room_id and created_at for efficient message retrieval
    CREATE INDEX idx_messages_room_created ON messages(room_id, created_at);

    -- Escrow transactions table
    CREATE TABLE escrow_transactions (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      escrow_id VARCHAR(255) NOT NULL,
      sender_id UUID NOT NULL REFERENCES users(id),
      recipient_id UUID REFERENCES users(id),
      recipient_wallet_address VARCHAR(255),
      amount DECIMAL(20, 9) NOT NULL,
      conditions TEXT,
      status VARCHAR(50) NOT NULL DEFAULT 'pending',
      transaction_signature VARCHAR(255),
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Create index on escrow_id
    CREATE INDEX idx_escrow_transactions_escrow_id ON escrow_transactions(escrow_id);

    -- Search indices table with vector support
    CREATE TABLE search_indices (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      content_type VARCHAR(50) NOT NULL,
      content_id UUID NOT NULL,
      content TEXT NOT NULL,
      embedding VECTOR(1536),
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Create a GIN index for the vector column for similarity search
    CREATE INDEX idx_search_indices_embedding ON search_indices USING ivfflat (embedding vector_cosine_ops);

    -- Create a composite index for content type and ID
    CREATE INDEX idx_search_indices_content ON search_indices(content_type, content_id);

    -- Function to update the updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
       NEW.updated_at = NOW();
       RETURN NEW;
    END;
    $$ LANGUAGE 'plpgsql';

    -- Create triggers for all tables with updated_at
    CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_chat_rooms_updated_at
    BEFORE UPDATE ON chat_rooms
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_messages_updated_at
    BEFORE UPDATE ON messages
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_escrow_transactions_updated_at
    BEFORE UPDATE ON escrow_transactions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    CREATE TRIGGER update_search_indices_updated_at
    BEFORE UPDATE ON search_indices
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
